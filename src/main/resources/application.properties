spring.application.name=sma-monolithe

server.port=8092
#spring.config.import=optional:configserver:${CONFIG_SERVICE_URL:http://localhost:9999}
#eureka.client.service-url.defaultZone=${DISCOVERY_SERVICE_URL:http://localhost:8761/eureka}

# Avec docker compose, et la conf recuperee depuis github, ca fonctionne, peu importe le profile, et fonctionne meme sans profile tout court!
#spring.profiles.active=prod



################## H2 MEM
#spring.datasource.url=jdbc:h2:mem:monolithe;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
#spring.datasource.driverClassName=org.h2.Driver
#spring.datasource.username=sa
#spring.datasource.password=
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
#spring.h2.console.enabled = true
#spring.h2.console.settings.trace=true
#spring.h2.console.settings.web-allow-others=true

################### MARIADB
#spring.datasource.url=jdbc:mysql://localhost:3306/monolithe?createDatabaseIfNotExist=true
##spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:${MYSQL_PORT:3306}/monolithe?createDatabaseIfNotExist=true
#spring.datasource.username=${MYSQL_USER:root}
#spring.datasource.password=${MYSQL_PASSWORD:tiger}
##spring.datasource.driver-class-name=com.mysql.jdbc.Driver
##spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MariaDBDialect
##spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect

################### POSTGRESQL
spring.datasource.url=${DB_GARAGE_URL:jdbc:postgresql://localhost:50006/monolithe}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect
################### COMMUN
spring.datasource.username=keycloak
spring.datasource.password=password

spring.jpa.show-sql = true
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create-drop

#spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URL:http://localhost:8080/realms/sma-realm}
#spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWT_URL:http://localhost:8080/realms/sma-realm/protocol/openid-connect/certs}

#resilience4j.retry.instances.retryApi.max-attempts=3
#resilience4j.retry.instances.retryApi.wait-duration=1s
#resilience4j.retry.metrics.legacy.enabled=true
#resilience4j.retry.metrics.enabled=true


###########################################
#   AXON
axon.serializer.general=jackson
axon.serializer.events=jackson
axon.serializer.messages=XStream
# application.properties
axon.axonserver.servers=localhost:8124

# Axon configuration to use the RDBMS as Event Store
axon.eventhandling.processors.myProcessor.mode=tracking
axon.eventhandling.processors.myProcessor.source=eventStore

#spring.jpa.properties.hibernate.id.db_structure_naming_strategy=legacy



###########################################
# THYMELEAF
#spring.datasource.url=jdbc:h2:mem:thymeleaf-db
#spring.h2.console.enabled=true
#
#spring.security.oauth2.client.registration.google.clientId=782329702620-feq7hnq8scsh09socq04dhornaias4bj.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.client-secret=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
#spring.security.oauth2.client.provider.google.user-name-attribute=email
#
#
#spring.security.oauth2.client.registration.keycloak.client-name=keycloak
#spring.security.oauth2.client.registration.keycloak.client-id=sma-thymeleaf-frontend
##spring.security.oauth2.client.registration.keycloak.client-secret=8MhBkdYB7XPqIgVnQxG3RxKPqUh9oYzp
#spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,offline_access
#spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
##spring.security.oauth2.client.registration.keycloak.redirect-uri=http://localhost:8091/login/oauth2/code/sma-thymeleaf-frontend
#spring.security.oauth2.client.registration.keycloak.redirect-uri=${KEYCLOAK_REDIRECT_URI:http://localhost:8091/login/oauth2/code/sma-thymeleaf-frontend}
#spring.security.oauth2.client.provider.keycloak.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:8080/realms/sma-realm}
## preferred_username affiche par defaut lorsqu'un user est connecte avec keyclaok
#spring.security.oauth2.client.provider.keycloak.user-name-attribute=preferred_username
##spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8080/realms/sma-realm
